diff -ruN oneTBB-2020.3/build/common_rules.inc oneTBB-2020.3-windows/build/common_rules.inc
--- oneTBB-2020.3/build/common_rules.inc	2020-07-10 22:18:01.000000000 +0900
+++ oneTBB-2020.3-windows/build/common_rules.inc	2020-07-19 09:40:44.023442400 +0900
@@ -139,20 +139,20 @@
 	$(CPLUS) $(CPLUS_FLAGS) $(CXX_ONLY_FLAGS) $(INCLUDE_KEY). $(INCLUDES) $(PREPROC_ONLY) $< >$@
 
 %.res: %.rc version_string.ver $(TBB.MANIFEST)
-	rc /Fo$@ $(INCLUDES) $(filter /D%,$(CPLUS_FLAGS)) $<
+	rc -Fo$@ $(INCLUDES) $(filter /D%,$(CPLUS_FLAGS)) $<
 
 # TODO: add $(LIB_LINK_LIBS) $(LIB_LINK_FLAGS) (in a separate line?) and remove useless $(INCLUDES)
 VERSION_FLAGS=$(CPLUS) $(CPLUS_FLAGS) $(CXX_ONLY_FLAGS) $(INCLUDES)
 
 ifneq (,$(TBB.MANIFEST))
 $(TBB.MANIFEST):
-	cmd /C "echo #include ^<stdio.h^> >tbbmanifest.c"
-	cmd /C "echo int main(){return 0;} >>tbbmanifest.c"
-	cl /nologo $(C_FLAGS) tbbmanifest.c
+	echo '#include <stdio.h>' >tbbmanifest.c"
+	echo 'int main(){return 0;}' >>tbbmanifest.c"
+	cl -nologo $(C_FLAGS) tbbmanifest.c
 
 version_string.ver: $(TBB.MANIFEST)
 	$(MAKE_VERSIONS)
-	cmd /C "echo #define TBB_MANIFEST 1 >> version_string.ver"
+	echo '#define TBB_MANIFEST 1' >> version_string.ver"
 # TODO: fix parallel build by writing to a temporary file and rename it when complete
 else
 # TODO: make version strings directly representative for all the libraries
diff -ruN oneTBB-2020.3/build/windows.cl.inc oneTBB-2020.3-windows/build/windows.cl.inc
--- oneTBB-2020.3/build/windows.cl.inc	2020-07-10 22:18:01.000000000 +0900
+++ oneTBB-2020.3-windows/build/windows.cl.inc	2020-07-19 09:26:26.335276700 +0900
@@ -20,104 +20,104 @@
 #------------------------------------------------------------------------------
 # Setting compiler flags.
 #------------------------------------------------------------------------------
-CPLUS ?= cl /nologo
-LINK_FLAGS = /link /nologo
-LIB_LINK_FLAGS=/link /nologo /DLL /MAP /DEBUG /fixed:no /INCREMENTAL:NO /DYNAMICBASE /NXCOMPAT
+CPLUS ?= cl -nologo
+LINK_FLAGS = -link -nologo
+LIB_LINK_FLAGS=-link -nologo -DLL -MAP -DEBUG -fixed:no -INCREMENTAL:NO -DYNAMICBASE -NXCOMPAT
 
 ifneq (,$(stdver))
-    CXX_STD_FLAGS = /std:$(stdver)
+    CXX_STD_FLAGS = -std:$(stdver)
 endif
 
 ifeq ($(arch), ia32)
-    LIB_LINK_FLAGS += /SAFESEH
+    LIB_LINK_FLAGS += -SAFESEH
 endif
 
 ifeq ($(runtime), vc_mt)
-    MS_CRT_KEY = /MT$(if $(findstring debug,$(cfg)),d)
+    MS_CRT_KEY = -MT$(if $(findstring debug,$(cfg)),d)
 else
-    MS_CRT_KEY = /MD$(if $(findstring debug,$(cfg)),d)
+    MS_CRT_KEY = -MD$(if $(findstring debug,$(cfg)),d)
 endif
-EH_FLAGS = $(if $(no_exceptions),/EHs-,/EHsc /GR)
+EH_FLAGS = $(if $(no_exceptions),-EHs-,-EHsc -GR)
 
 # UWD binaries have to use static CRT linkage
 ifeq ($(target_app), uwd)
-    MS_CRT_KEY = /MT$(if $(findstring debug,$(cfg)),d)
+    MS_CRT_KEY = -MT$(if $(findstring debug,$(cfg)),d)
 endif
 
 ifeq ($(cfg), release)
-        CPLUS_FLAGS = $(MS_CRT_KEY) /O2 /Zi $(EH_FLAGS) /Zc:forScope /Zc:wchar_t /D__TBB_LIB_NAME=$(TBB.LIB)
+        CPLUS_FLAGS = $(MS_CRT_KEY) -O2 -Zi $(EH_FLAGS) -Zc:forScope -Zc:wchar_t -D__TBB_LIB_NAME=$(TBB.LIB)
         ASM_FLAGS =
 endif
 ifeq ($(cfg), debug)
-        CPLUS_FLAGS = $(MS_CRT_KEY) /Od /Ob0 /Zi $(EH_FLAGS) /Zc:forScope /Zc:wchar_t /DTBB_USE_DEBUG /D__TBB_LIB_NAME=$(TBB.LIB)
-        ASM_FLAGS = /DUSE_FRAME_POINTER
+        CPLUS_FLAGS = $(MS_CRT_KEY) -Od -Ob0 -Zi $(EH_FLAGS) -Zc:forScope -Zc:wchar_t -DTBB_USE_DEBUG -D__TBB_LIB_NAME=$(TBB.LIB)
+        ASM_FLAGS = -DUSE_FRAME_POINTER
 endif
 
-ZW_KEY = /ZW:nostdlib
+ZW_KEY = -ZW:nostdlib
 
 # These flags are general for Windows* universal applications
 ifneq (,$(target_app))
-    CPLUS_FLAGS += $(ZW_KEY) /D "_UNICODE" /D "UNICODE" /D "WINAPI_FAMILY=WINAPI_FAMILY_APP"
+    CPLUS_FLAGS += $(ZW_KEY) -D "_UNICODE" -D "UNICODE" -D "WINAPI_FAMILY=WINAPI_FAMILY_APP"
 endif
 
 ifeq ($(target_app), win8ui)
         _WIN32_WINNT = 0x0602
 else ifneq (,$(filter $(target_app),uwp uwd))
         _WIN32_WINNT = 0x0A00
-        LIB_LINK_FLAGS += /NODEFAULTLIB:kernel32.lib OneCore.lib
+        LIB_LINK_FLAGS += -NODEFAULTLIB:kernel32.lib OneCore.lib
 else
-        CPLUS_FLAGS += /DDO_ITT_NOTIFY
+        CPLUS_FLAGS += -DDO_ITT_NOTIFY
 endif
 ifeq ($(target_mode), store)
 #       it is necessary to source vcvars with 'store' argument in production
-        LIB_LINK_FLAGS += /APPCONTAINER
+        LIB_LINK_FLAGS += -APPCONTAINER
 endif
 
-CPLUS_FLAGS += /GS
+CPLUS_FLAGS += -GS
 
-COMPILE_ONLY = /c
-PREPROC_ONLY = /TP /EP
-INCLUDE_KEY = /I
-DEFINE_KEY = /D
-OUTPUT_KEY = /Fe
-OUTPUTOBJ_KEY = /Fo
-WARNING_AS_ERROR_KEY = /WX
-WARNING_SUPPRESS = $(if $(no_exceptions),/wd4530 /wd4577)
-BIGOBJ_KEY = /bigobj
+COMPILE_ONLY = -c
+PREPROC_ONLY = -TP -EP
+INCLUDE_KEY = -I
+DEFINE_KEY = -D
+OUTPUT_KEY = -Fe
+OUTPUTOBJ_KEY = -Fo
+WARNING_AS_ERROR_KEY = -WX
+WARNING_SUPPRESS = $(if $(no_exceptions),-wd4530 -wd4577)
+BIGOBJ_KEY = -bigobj
 
 ifeq ($(runtime),vc7.1)
-        WARNING_KEY = /W3
+        WARNING_KEY = -W3
 else
-        WARNING_KEY = /W4
-        OPENMP_FLAG = /openmp
+        WARNING_KEY = -W4
+        OPENMP_FLAG = -Openmp
 endif
 
-DYLIB_KEY = /DLL
-EXPORT_KEY = /DEF:
-NODEFAULTLIB_KEY = /Zl
-NOINTRINSIC_KEY = /Oi-
+DYLIB_KEY = -DLL
+EXPORT_KEY = -DEF:
+NODEFAULTLIB_KEY = -Zl
+NOINTRINSIC_KEY = -Oi-
 
-INCLUDE_TEST_HEADERS = /FI$(tbb_root)/src/test/harness_preload.h
+INCLUDE_TEST_HEADERS = -FI$(tbb_root)/src/test/harness_preload.h
 
 ifeq ($(runtime),vc8)
-        WARNING_KEY += /Wp64
-        CPLUS_FLAGS += /D_USE_RTM_VERSION
+        WARNING_KEY += -Wp64
+        CPLUS_FLAGS += -D_USE_RTM_VERSION
 endif
 
 # Since VS2012, VC++ provides /volatile option to control semantics of volatile variables.
 # We want to use strict ISO semantics in the library and tests
 ifeq (ok,$(call detect_js,/minversion cl 17))
-        CPLUS_FLAGS += /volatile:iso
+        CPLUS_FLAGS += -volatile:iso
 endif
 
 # Since VS2013, VC++ uses the same .pdb file for different sources so we need
 # to add /FS (Force Synchronous PDB Writes)
 ifeq (ok,$(call detect_js,/minversion cl 18))
-        CPLUS_FLAGS += /FS
+        CPLUS_FLAGS += -FS
 endif
 
-CPLUS_FLAGS += /DUSE_WINTHREAD /D_CRT_SECURE_NO_DEPRECATE \
-        /D_WIN32_WINNT=$(_WIN32_WINNT)
+CPLUS_FLAGS += -DUSE_WINTHREAD -D_CRT_SECURE_NO_DEPRECATE \
+        -D_WIN32_WINNT=$(_WIN32_WINNT)
 C_FLAGS = $(subst $(ZW_KEY),,$(subst $(EH_FLAGS),,$(CPLUS_FLAGS)))
 
 #------------------------------------------------------------------------------
@@ -130,8 +130,8 @@
 #------------------------------------------------------------------------------
 ASSEMBLY_SOURCE=$(arch)-masm
 ifeq (intel64,$(arch))
-    ASM=ml64 /nologo
-    ASM_FLAGS += /DEM64T=1 /c /Zi
+    ASM=ml64 -nologo
+    ASM_FLAGS += -DEM64T=1 -c -Zi
     TBB_ASM.OBJ = atomic_support.obj intel64_misc.obj itsx.obj
     MALLOC_ASM.OBJ = atomic_support.obj
 else
@@ -139,8 +139,8 @@
     ASM=
     TBB_ASM.OBJ= 
 else
-    ASM=ml /nologo
-    ASM_FLAGS += /c /coff /Zi /safeseh
+    ASM=ml -nologo
+    ASM_FLAGS += -c -coff -Zi -safeseh
     TBB_ASM.OBJ = atomic_support.obj lock_byte.obj itsx.obj
 endif
 endif
diff -ruN oneTBB-2020.3/build/windows.inc oneTBB-2020.3-windows/build/windows.inc
--- oneTBB-2020.3/build/windows.inc	2020-07-10 22:18:01.000000000 +0900
+++ oneTBB-2020.3-windows/build/windows.inc	2020-07-19 10:30:31.113586100 +0900
@@ -12,8 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-export SHELL = cmd
-
 ifdef tbb_build_dir
   test_dir:=$(tbb_build_dir)
 else
@@ -22,7 +20,7 @@
 
 # A convenience wrapper for calls to detect.js.
 # $(1) is the full command line for the script, e.g. /minversion icl 12
-detect_js = $(shell cmd /C "cscript /nologo /E:jscript $(tbb_root)/build/detect.js $(1)")
+detect_js = $(shell cmd.exe //c "cscript -nologo -E:jscript $(tbb_root)/build/detect.js $(1)")
 
 # TODO give an error if archs doesn't match
 ifndef arch
@@ -37,17 +35,18 @@
 export compiler ?= cl
 debugger ?= devenv /debugexe
 
-CMD=cmd /C
-CWD=$(shell cmd /C echo %CD%)
-RM=cmd /C del /Q /F
-RD=cmd /C rmdir
-MD=cmd /c mkdir
-SLASH=\\
-NUL = nul
+CMD=sh -c
+CWD=$(shell pwd)
+CP=cp
+RM?=rm -f
+RD?=rmdir
+MD?=mkdir -p
+NUL= /dev/null
+SLASH=/
 
 AR=lib
-AR_OUTPUT_KEY=/out:
-AR_FLAGS=/nologo /nodefaultlib
+AR_OUTPUT_KEY=-out:
+AR_FLAGS=-nologo -nodefaultlib
 
 OBJ = obj
 DLL = dll
@@ -110,8 +109,8 @@
 RML.MANIFEST = tbbmanifest.exe.manifest
 endif
 
-MAKE_VERSIONS = cmd /C cscript /nologo /E:jscript $(subst \,/,$(tbb_root))/build/version_info_windows.js $(compiler) $(arch) $(subst \,/,"$(VERSION_FLAGS)") > version_string.ver
-MAKE_TBBVARS  = cmd /C "$(subst /,\,$(tbb_root))\build\generate_tbbvars.bat"
+MAKE_VERSIONS = cmd.exe //c cscript -nologo -E:jscript $(subst \,/,$(tbb_root))/build/version_info_windows.js $(compiler) $(arch) $(subst \,/,"$(VERSION_FLAGS)") > version_string.ver
+MAKE_TBBVARS  = cmd.exe //c "$(subst /,\,$(tbb_root))\build\generate_tbbvars.bat"
 
 TEST_LAUNCHER = $(subst /,\,$(tbb_root))\build\test_launcher.bat $(largs)
 
